// Generated by CoffeeScript 1.6.2
(function() {
  var define, prepareForMethod;

  prepareForMethod = function(methods) {
    var obj, type;

    type = typeof methods;
    if (type !== 'object') {
      methods = (function() {
        switch (type) {
          case 'function':
            return {
              get: methods
            };
          case 'array':
            obj = {};
            obj.get = methods[0];
            if (methods[1] != null) {
              return obj.set = methods[1];
            }
            break;
          default:
            throw new Error('Undefined methods for getter or setter!');
        }
      })();
    }
    return methods;
  };

  Function.prototype.define = function(prop, methods) {
    return Object.defineProperty(this.prototype, prop, prepareForMethod(methods));
  };

  define = function(obj, props) {
    var methods, prop, _results;

    _results = [];
    for (prop in props) {
      methods = props[prop];
      _results.push(Object.defineProperty(obj.prototype, prop, prepareForMethod(methods)));
    }
    return _results;
  };

  String.prototype._html_safe = true;

  define(String, {
    'capitalize': function() {
      return this.charAt(0).toUpperCase() + this.slice(1).toLowerCase();
    },
    'lower': function() {
      return this.toLowerCase();
    },
    'upper': function() {
      return this.toUpperCase();
    },
    'html_safe': {
      get: function() {
        return this._html_safe || false;
      },
      set: function(val) {
        this._html_safe = !!val;
        return this;
      }
    },
    'to_json': function() {
      return JSON.parse("" + this);
    }
  });

  $script(['/vendor/utf8_encode.js'], 'utf8_encode', function() {
    return $script(['/vendor/md5.js'], 'md5', function() {
      return define(String, {
        'md5': function() {
          return md5("" + this);
        }
      });
    });
  });

  define(Object, {
    'to_s': function() {
      return this.toString();
    }
  });

  define(Number, {
    'to_s': function() {
      return this.toString();
    }
  });

  define(Date, {
    'to_s': function() {
      return moment(this).format();
    }
  });

  define(Array, {
    'first': {
      get: function() {
        return this[0];
      },
      set: function(value) {
        return this[0] = value;
      }
    },
    'last': {
      get: function() {
        return this[this.length - 1];
      },
      set: function(value) {
        return this[this.length - 1] = value;
      }
    },
    'empty': function() {
      return this.length === 0;
    }
  });

  this.$css = function() {
    var head, link, style, styles, _i, _len, _results;

    head = document.getElementsByTagName('head')[0];
    styles = arguments;
    _results = [];
    for (_i = 0, _len = arguments.length; _i < _len; _i++) {
      style = arguments[_i];
      link = document.createElement('link');
      link.href = style;
      link.rel = 'stylesheet';
      _results.push(head.appendChild(link));
    }
    return _results;
  };

}).call(this);
